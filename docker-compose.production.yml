services:
  app:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: palsa-pos-app-prod
    restart: unless-stopped
    working_dir: /var/www
    volumes:
      - ./storage:/var/www/storage
      - ./bootstrap/cache:/var/www/bootstrap/cache
    networks:
      - palsa-pos-network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production
    healthcheck:
      test: ["CMD", "php", "artisan", "tinker", "--execute=echo 'OK';"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: palsa-pos-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./:/var/www
      - ./docker/nginx/production.conf:/etc/nginx/conf.d/default.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - palsa-pos-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: mysql:8.0
    container_name: palsa-pos-db-prod
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: palsa_pos_production
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db_data:/var/lib/mysql
      - ./docker/mysql/production.cnf:/etc/mysql/conf.d/production.cnf
    networks:
      - palsa-pos-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:alpine
    container_name: palsa-pos-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    networks:
      - palsa-pos-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  queue:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: palsa-pos-queue-prod
    restart: unless-stopped
    working_dir: /var/www
    command: php artisan queue:work --sleep=3 --tries=3 --max-time=3600
    volumes:
      - ./:/var/www
    networks:
      - palsa-pos-network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production

  scheduler:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: palsa-pos-scheduler-prod
    restart: unless-stopped
    working_dir: /var/www
    command: sh -c "while true; do php artisan schedule:run; sleep 60; done"
    volumes:
      - ./:/var/www
    networks:
      - palsa-pos-network
    depends_on:
      - db
      - redis
    environment:
      - APP_ENV=production

networks:
  palsa-pos-network:
    driver: bridge

volumes:
  db_data:
    driver: local
  redis_data:
    driver: local